//! RFC4648 implemented, base32 encoding.
//!
//! # Examples
//!
//! base32 encode basic usage:
//!
//! ```
//! use connx::encoding::base32;
//! let encoded_bytes: Vec<u8> = base32::encode_bytes(b"hello");
//! assert_eq!(encoded_bytes, b"NBSWY3DP");
//! ```
//!
//! base32 decode basic usage:
//!
//! ```
//! use connx::encoding::base32;
//! assert_eq!(base32::decode_str("NBSWY3DP"), Ok((b"hello").to_vec()));
//! ```

/// Standard encoding map from RFC4648
pub const ENCODE_STD: &[u8] = b"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567";

/// Hex encoding map from RFC4648
pub const ENCODE_HEX: &[u8] = b"0123456789ABCDEFGHIJKLMNOPQRSTUV";

/// Standard padding char from RFC4648
pub const PAD_CHAR: u8 = b'=';

/// Standard decoding map
pub const DECODE_STD_MAP: &[u8] = &[
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
    0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
];

/// Hex decoding map
pub const DECODE_HEX_MAP: &[u8] = &[
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
    0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
];

/// Errors when base32 encode and decode
#[derive(Debug, PartialEq)]
pub enum Base32Error {
    InvalidByte(u8),
    InvalidLength,
}

impl std::fmt::Display for Base32Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::InvalidByte(b) => write!(f, "encoding/base32: invalid byte: {}", b),
            Self::InvalidLength => write!(f, "encoding/base32: invalid input length"),
        }
    }
}

impl std::error::Error for Base32Error {}

/// Calculate base32 encoded string length
///
/// - @param n: raw bytes length
/// - @return: base32 encoded string length
///
/// # Examples
///
/// Basic usage:
///
/// ```
/// use connx::encoding::base32;
/// assert_eq!(base32::encode_len(0), 0);
/// assert_eq!(base32::encode_len(5), 8);
/// assert_eq!(base32::encode_len(10), 16);
/// ```
#[inline]
pub fn encode_len(n: usize) -> usize {
    (n + 4) / 5 * 8
}

/// Calculate base32 decoded data length.
///
/// - @param n: base32 string length
/// - @return: decoded raw bytes length
///
/// # Examples
///
/// Basic usage:
///
/// ```
/// use connx::encoding::base32;
/// assert_eq!(base32::decode_len(0), 0);
/// assert_eq!(base32::decode_len(8), 5);
/// ```
#[inline]
pub fn decode_len(n: usize) -> usize {
    n / 8 * 5
}

/// Encode bytes to base32 bytes
///
/// - @param dst: encoded base32 bytes
/// - @param src: raw bytes
/// - @param encode_map: base32 encoding map
///
/// # Examples
///
/// Basic usage:
///
/// ```
/// use connx::encoding::base32;
/// let src = b"hello";
/// let dst_len = base32::encode_len(src.len());
/// let mut dst = vec![0; dst_len];
/// base32::encode(&mut dst, src, base32::ENCODE_STD);
/// assert_eq!(dst, b"NBSWY3DP");
/// ```
pub fn encode(dst: &mut [u8], src: &[u8], encode_map: &[u8]) {
    let src_len = src.len();

    // process every 5 bytes(src) to 8 bytes(dst)
    // 5x8bit => 8x5bit
    let mut src_idx = 0;
    let mut dst_idx = 0;
    let n = (src_len / 5) * 5;
    while src_idx < n {
        let val: u64 = u64::from(src[src_idx + 0]) << 32
            | u64::from(src[src_idx + 1]) << 24
            | u64::from(src[src_idx + 2]) << 16
            | u64::from(src[src_idx + 3]) << 8
            | u64::from(src[src_idx + 4]);

        dst[dst_idx + 0] = encode_map[(val >> 35 & 0x1F) as usize];
        dst[dst_idx + 1] = encode_map[(val >> 30 & 0x1F) as usize];
        dst[dst_idx + 2] = encode_map[(val >> 25 & 0x1F) as usize];
        dst[dst_idx + 3] = encode_map[(val >> 20 & 0x1F) as usize];
        dst[dst_idx + 4] = encode_map[(val >> 15 & 0x1F) as usize];
        dst[dst_idx + 5] = encode_map[(val >> 10 & 0x1F) as usize];
        dst[dst_idx + 6] = encode_map[(val >> 5 & 0x1F) as usize];
        dst[dst_idx + 7] = encode_map[(val & 0x1F) as usize];

        src_idx += 5;
        dst_idx += 8;
    }

    let remain = src_len - src_idx;
    match remain {
        0 => return,
        1 | 2 | 3 | 4 => {
            let mut val: u64 = 0;
            for i in 0..remain {
                val |= u64::from(src[src_idx + i]) << ((4 - i) * 8);
            }
            let remain_bit: i32 = (remain * 8) as i32;
            let mut used_bit: i32 = 0;
            for dst_offset in 0..8 {
                dst[dst_idx + dst_offset] = if used_bit >= remain_bit {
                    PAD_CHAR
                } else {
                    used_bit += 5;
                    encode_map[(val >> (40 - used_bit) & 0x1F) as usize]
                };
            }
        }
        _ => unreachable!(),
    }
}

/// Encode bytes to base32 bytes
///
/// - @param src: raw bytes
/// - @return: base32 encoded bytes
///
/// # Examples
///
/// Basic usage:
///
/// ```
/// use connx::encoding::base32;
/// let encoded_bytes: Vec<u8> = base32::encode_bytes(b"hello");
/// assert_eq!(encoded_bytes, b"NBSWY3DP");
/// ```
pub fn encode_bytes(src: &[u8]) -> Vec<u8> {
    let dst_len = encode_len(src.len());
    let mut dst = vec![0; dst_len];
    encode(&mut dst, src, ENCODE_STD);
    dst
}

/// Encode string to base32 string
///
/// - @param src: raw string
/// - @return: base32 encoded string
///
/// # Examples
///
/// Basic usage:
///
/// ```
/// use connx::encoding::base32;
/// let encoded_string: String = base32::encode_str("hello");
/// assert_eq!(encoded_string, "NBSWY3DP".to_string());
/// ```
pub fn encode_str(src: &str) -> String {
    let dst_len = encode_len(src.len());
    let mut dst = vec![0; dst_len];
    encode(&mut dst, src.as_bytes(), ENCODE_STD);
    String::from_utf8(dst).unwrap()
}

#[inline]
fn from_char(b: u8, decode_map: &[u8]) -> Result<u8, Base32Error> {
    let out = decode_map[b as usize];
    if out == 0xFF {
        return Err(Base32Error::InvalidByte(b));
    }
    return Ok(out);
}

/// Decode base32 bytes to raw bytes
///
/// - @param dst: decoded raw bytes
/// - @param src: base32 bytes
/// - @param encode_map: base32 decoding map
/// - @return: raw byte size if successfully decoded.
///
/// # Examples
///
/// Basic usage:
///
/// ```
/// use connx::encoding::base32;
/// let src = b"NBSWY3DP";
/// let mut dst = vec![0; base32::decode_len(src.len())];
/// let dst_size = base32::decode(&mut dst, src, base32::DECODE_STD_MAP).unwrap();
/// dst.drain(dst_size..);
/// assert_eq!(dst, b"hello");
/// ```
pub fn decode(dst: &mut [u8], src: &[u8], decode_map: &[u8]) -> Result<usize, Base32Error> {
    let src_len = src.len();
    if src_len == 0 || src_len % 8 != 0 {
        return Err(Base32Error::InvalidLength);
    }

    // Process src[0..src_len-8]
    let mut src_idx = 0;
    let mut dst_idx = 0;
    while src_idx + 8 < src_len {
        // Convert 8x 5bit to 5x 8bit
        let val: u64 = u64::from(from_char(src[src_idx + 0], decode_map)?) << 35
            | u64::from(from_char(src[src_idx + 1], decode_map)?) << 30
            | u64::from(from_char(src[src_idx + 2], decode_map)?) << 25
            | u64::from(from_char(src[src_idx + 3], decode_map)?) << 20
            | u64::from(from_char(src[src_idx + 4], decode_map)?) << 15
            | u64::from(from_char(src[src_idx + 5], decode_map)?) << 10
            | u64::from(from_char(src[src_idx + 6], decode_map)?) << 5
            | u64::from(from_char(src[src_idx + 7], decode_map)?);

        dst[dst_idx + 0] = ((val >> 32) & 0xFF) as u8;
        dst[dst_idx + 1] = ((val >> 24) & 0xFF) as u8;
        dst[dst_idx + 2] = ((val >> 16) & 0xFF) as u8;
        dst[dst_idx + 3] = ((val >> 8) & 0xFF) as u8;
        dst[dst_idx + 4] = (val & 0xFF) as u8;

        src_idx += 8;
        dst_idx += 5;
    }

    // Process last 8 bytes
    // 1 byte -> [c c = = = = = =]
    // 2 byte -> [c c c c = = = =]
    // 3 byte -> [c c c c c = = =]
    // 4 byte -> [c c c c c c c =]
    // 5 byte -> [c c c c c c c c]
    let mut characters_num = 0;
    let mut pad_num = 0;
    for i in src_idx..src_len {
        if src[i] == PAD_CHAR {
            pad_num += 1;
        } else {
            characters_num += 1;
        }
    }

    let dst_remain_byte = if characters_num == 2 && pad_num == 6 {
        // [c c = = = = = =], convert to 1 dst byte
        1
    } else if characters_num == 4 && pad_num == 4 {
        // [c c c c = = = =], convert to 2 dst byte
        2
    } else if characters_num == 5 && pad_num == 3 {
        // [c c c c c = = =], convert to 3 dst byte
        3
    } else if characters_num == 7 && pad_num == 1 {
        // [c c c c c c c =], convert to 4 dst byte
        4
    } else {
        // characters_num == 8 && pad_num == 0
        // [c c c c c c c c], convert to 5 dst byte
        5
    };

    let mut val: u64 = 0;
    for i in 0..characters_num {
        val |= u64::from(from_char(src[src_idx + i], decode_map)?) << (35 - i * 5);
    }
    for i in 0..dst_remain_byte {
        dst[dst_idx + i] = ((val >> (32 - i * 8)) & 0xFF) as u8;
    }
    dst_idx += dst_remain_byte;

    Ok(dst_idx)
}

/// Decode base32 string to raw bytes
///
/// - @param src: base32 string
/// - @return: decoded raw byte if successfully decoded.
///
/// # Examples
///
/// Basic usage:
///
/// ```
/// use connx::encoding::base32;
/// let src = "NBSWY3DP";
/// let dst = base32::decode_str(src).unwrap();
/// assert_eq!(dst, b"hello");
/// ```
pub fn decode_str(src: &str) -> Result<Vec<u8>, Base32Error> {
    let mut dst = vec![0; decode_len(src.len())];
    let dst_size = decode(&mut dst, src.as_bytes(), DECODE_STD_MAP)?;
    dst.drain(dst_size..);
    Ok(dst)
}

#[cfg(test)]
mod tests_base32 {
    use super::*;

    fn test_encode_base(data: &[u8], encoded_expect: &[u8]) {
        let mut dst = vec![0; encode_len(data.len())];
        encode(&mut dst, data, ENCODE_STD);
        assert_eq!(dst, encoded_expect);

        let mut decoded_dst = vec![0; decode_len(dst.len())];
        if let Ok(size) = decode(&mut decoded_dst, &dst, DECODE_STD_MAP) {
            decoded_dst.drain(size..);
            assert_eq!(data, decoded_dst);
        }
    }

    #[test]
    fn test_encode_01() {
        test_encode_base(b"", b"");
        test_encode_base(b"f", b"MY======");
        test_encode_base(b"fo", b"MZXQ====");
        test_encode_base(b"foo", b"MZXW6===");
        test_encode_base(b"foob", b"MZXW6YQ=");
        test_encode_base(b"fooba", b"MZXW6YTB");
        test_encode_base(b"foobar", b"MZXW6YTBOI======");
        test_encode_base(b"hello", b"NBSWY3DP");
    }

    #[test]
    fn test01() {
        test_encode_base(b"rkNenDvztAM4PQ5nFiduKoCa0APDrLA0zuUtxPP0L1u18KQ25kKnLuOdpGhtzDLqiqpY07hDDynz8bL0mbEVcdK1VDOKRD9852X5", b"OJVU4ZLOIR3HU5CBJU2FAUJVNZDGSZDVJNXUGYJQIFIEI4SMIEYHU5KVOR4FAUBQJQYXKMJYJNITENLLJNXEY5KPMRYEO2DUPJCEY4LJOFYFSMBXNBCEI6LOPI4GETBQNVREKVTDMRFTCVSEJ5FVERBZHA2TEWBV");
        test_encode_base(b"51hydSy3pxVJJzTxQP98fRvRIcu8bgEE4xanfAfL9wlK3xXo8PPlnu50sii2HIu5IluynlKeoUHBSN9WvQeR0XGr8R9BZ4t0nwIG", b"GUYWQ6LEKN4TG4DYKZFEU6SUPBIVAOJYMZJHMUSJMN2TQYTHIVCTI6DBNZTECZSMHF3WYSZTPBMG6OCQKBWG45JVGBZWS2JSJBEXKNKJNR2XS3TMJNSW6VKIIJJU4OKXOZIWKURQLBDXEOCSHFBFUNDUGBXHOSKH");
        test_encode_base(b"77WvizANcagh3eUK6sE3hvFgtVtjwJSyW79z7oeb9GTouhkRhmKWDlg3SroOppjmSRykvOHQKXALOAMeghPFf50gbHwTyFfzfuAw", b"G43VO5TJPJAU4Y3BM5UDGZKVJM3HGRJTNB3EMZ3UKZ2GU52KKN4VONZZPI3W6ZLCHFDVI33VNBVVE2DNJNLUI3DHGNJXE32POBYGU3KTKJ4WW5SPJBIUWWCBJRHUCTLFM5UFARTGGUYGOYSIO5KHSRTGPJTHKQLX");
        test_encode_base(b"SZtGHn3CVn0ox9u2rmVp8R8l844TSzGoFANIfvtx6NanHrIpBhtJ88cC6cEsw4WIariqgWDGzKn2o8S0mBRQCynsrasWKy9yzEmj", b"KNNHIR2INYZUGVTOGBXXQOLVGJZG2VTQHBJDQ3BYGQ2FIU32I5XUMQKOJFTHM5DYGZHGC3SIOJEXAQTIORFDQODDIM3GGRLTO42FOSLBOJUXCZ2XIRDXUS3OGJXTQUZQNVBFEUKDPFXHG4TBONLUW6JZPF5EK3LK");
        test_encode_base(b"BmsaXVzN7pLIGCrsAnjDPMFJXX4U4eAW9Df3MRhUrIHvXrqk1BPtgbJaBFAy4tp3vB2FirVWqwOSNiiVNwFPF7LGKVRgyK5qWmcL", b"IJWXGYKYKZ5E4N3QJREUOQ3SONAW42SEKBGUMSSYLA2FKNDFIFLTSRDGGNGVE2CVOJEUQ5SYOJYWWMKCKB2GOYSKMFBEMQLZGR2HAM3WIIZEM2LSKZLXC52PKNHGS2KWJZ3UMUCGG5GEOS2WKJTXSSZVOFLW2Y2M");
        test_encode_base(b"CBujNXx91GJbHl0FE0FrgNfa9szHgalbZpp0IS2DfNmUew6UtRdQUxzsj1f4Atu2c0K6vGBjzf6oqockN05nOhYS59aZmyQvHtiX", b"INBHK2SOLB4DSMKHJJREQ3BQIZCTARTSM5HGMYJZON5EQZ3BNRRFU4DQGBEVGMSEMZHG2VLFO43FK5CSMRIVK6D2ONVDCZRUIF2HKMTDGBFTM5SHIJVHUZRWN5YW6Y3LJYYDK3SPNBMVGNJZMFNG26KROZEHI2KY");
        test_encode_base(b"Uy8Q3N92TQAH1pduMklm4vuWR9tNRyauSbybiBfIJ1gZkfBWUGYQy1sLYcLWN5eGqPRw2aUvxO8j75n2ajNHJhtEs47jFoBoazyJ", b"KV4TQUJTJY4TEVCRIFEDC4DEOVGWW3DNGR3HKV2SHF2E4UTZMF2VGYTZMJUUEZSJJIYWOWTLMZBFOVKHLFIXSMLTJRMWGTCXJY2WKR3RKBJHOMTBKV3HQTZYNI3TK3RSMFVE4SCKNB2EK4ZUG5VEM32CN5QXU6KK");
        test_encode_base(b"n1cuOUy8TUgkBQCWRIY0HLZv7e8NSVn7zmso7Z5W3hCYmt6LdWQcjzKCukgX0DLaoGDDZehIUW0Hvm1JUy7sMG7ljHGueM4dR8Sp", b"NYYWG5KPKV4TQVCVM5VUEUKDK5JESWJQJBGFU5RXMU4E4U2WNY3XU3LTN43VUNKXGNUEGWLNOQ3EYZCXKFRWU6SLIN2WWZ2YGBCEYYLPI5CEIWTFNBEVKVZQJB3G2MKKKV4TO42NI43WY2SII52WKTJUMRJDQU3Q");
        test_encode_base(b"AyYxvvVlVtea3FpmSlEYYer78orFNO7yPTBRBSpw2s5zyEe6VaAxpWGcxm3q190Shzd6LPE0FhJttyrJQiqc7BshBrNpfVCtucRP", b"IF4VS6DWOZLGYVTUMVQTGRTQNVJWYRKZLFSXENZYN5ZEMTSPG54VAVCCKJBFG4DXGJZTK6TZIVSTMVTBIF4HAV2HMN4G2M3RGE4TAU3IPJSDMTCQIUYEM2CKOR2HS4SKKFUXCYZXIJZWQQTSJZYGMVSDOR2WGUSQ");
        test_encode_base(b"iWWgNhwfZB5MTBr2c8rXTdzf3igqqVnJRFNW5U4nWDHYRRc2W8gUkIzdN1PqBuv4kaEYjX8yZvgjhhrWJ4LsjjEMlynooV2etpYI", b"NFLVOZ2ONB3WMWSCGVGVIQTSGJRTQ4SYKRSHUZRTNFTXC4KWNZFFERSOK42VKNDOK5CEQWKSKJRTEVZYM5KWWSL2MRHDCUDRIJ2XMNDLMFCVS2SYHB4VU5THNJUGQ4SXJI2EY43KNJCU23DZNZXW6VRSMV2HAWKJ");
        test_encode_base(b"bPjKBMwUyq0TIsUyeW2Ceufgoq3ncYR3KTnEcNsA626Sq2Hif2GO0bJXRrYcnRH50D9Xx41dOt25OhhaFxbPgar1JmY7WyIZSQtN", b"MJIGUS2CJV3VK6LRGBKES42VPFSVOMSDMV2WMZ3POEZW4Y2ZKIZUWVDOIVRU442BGYZDMU3RGJEGSZRSI5HTAYSKLBJHEWLDNZJEQNJQIQ4VQ6BUGFSE65BSGVHWQ2DBIZ4GEUDHMFZDCSTNLE3VO6KJLJJVC5CO");
        test_encode_base(b"dH3SKSt3hU21jqrW36DMhLD3lTdKPDl2JrH7TrA0l1EbHvLM5Git6N2KU8iaF0JWgkN2NP4RGSRfKdrVjWQm1WL5Q7l44HVtf36t", b"MREDGU2LKN2DG2CVGIYWU4LSK4ZTMRCNNBGEIM3MKRSEWUCENQZEU4SIG5KHEQJQNQYUKYSIOZGE2NKHNF2DMTRSJNKTQ2LBIYYEUV3HNNHDETSQGRJEOU2SMZFWI4SWNJLVC3JRK5GDKUJXNQ2DISCWORTDGNTU");
        test_encode_base(b"O6hT1Xtwj3BVYWwqEhm1gXqS2tSrz5OxqU6arkvnXGZhX42Q9o6CZ8QuZ701ED79rYID8wUcmTccKm5TzvzVNWjUIQrBIvZv8kAw", b"J43GQVBRLB2HO2RTIJLFSV3XOFCWQ3JRM5MHCUZSORJXE6RVJ54HCVJWMFZGW5TOLBDVU2CYGQZFCOLPGZBVUOCROVNDOMBRIVCDOOLSLFEUIODXKVRW2VDDMNFW2NKUPJ3HUVSOK5VFKSKROJBES5S2OY4GWQLX");
        test_encode_base(b"ACdQr6rAuf84it1PBuc6WGMnlNZfwGLWgjuoQbAxaOhZ1IfWcf4ssC6czVayohPji3lxtsOGhGaQXQqeQ5qne9Yal1mehdVNASdg", b"IFBWIULSGZZEC5LGHA2GS5BRKBBHKYZWK5DU23TMJZNGM52HJRLWO2TVN5IWEQLYMFHWQWRRJFTFOY3GGRZXGQZWMN5FMYLZN5UFA2TJGNWHQ5DTJ5DWQR3BKFMFC4LFKE2XC3TFHFMWC3BRNVSWQZCWJZAVGZDH");
        test_encode_base(b"nKE01pF7tGOWm5ansJuEgiR1CyAPMa4hnVtlBcHrKdvuAUcJxFCQooSzkpj1Rn8HeWYNs5MdQP3RxuMWDSkTjetdwVkhtw2S8FJY", b"NZFUKMBROBDDO5CHJ5LW2NLBNZZUU5KFM5UVEMKDPFAVATLBGRUG4VTUNRBGGSDSJNSHM5KBKVRUU6CGINIW632TPJVXA2RRKJXDQSDFK5MU44ZVJVSFCUBTKJ4HKTKXIRJWWVDKMV2GI52WNNUHI5ZSKM4EMSSZ");
        test_encode_base(b"c0p6z7xeVbo6ujJOHTGMfre6yhTyxpdT7LRoVCyn8LgPXh4ZGi8MyzmlSRFtr5U5qnMqQscKx4okDntgUApecAgzIcMjgriWKw2e", b"MMYHANT2G54GKVTCN43HK2SKJ5EFIR2NMZZGKNTZNBKHS6DQMRKDOTCSN5LEG6LOHBGGOUCYNA2FUR3JHBGXS6TNNRJVERTUOI2VKNLRNZGXCULTMNFXQNDPNNCG45DHKVAXAZLDIFTXUSLDJVVGO4TJK5FXOMTF");
        test_encode_base(b"0oK393Su30MZ9uyDdPsMcVB6ek29xE2nOitP5YVUgGVRkA45JTwE4lcueLMP9TO4u5g6v6O3Jkv2VRtjqmBq1u3GLsozEv9ocrwm", b"GBXUWMZZGNJXKMZQJVNDS5LZIRSFA42NMNLEENTFNMZDS6CFGJXE62LUKA2VSVSVM5DVMUTLIE2DKSSUO5CTI3DDOVSUYTKQHFKE6NDVGVTTM5RWJ4ZUU23WGJLFE5DKOFWUE4JROUZUOTDTN55EK5RZN5RXE53N");
        test_encode_base(b"ej0LVGwxQuUf946BetLkXPquMS0Y9OjsKVYNbpPv3Y0tueGcI1vjgftenqynPnt2eCwyHGsO7OT1KtN2VChY9J3Szl6vyRmV4K9O", b"MVVDATCWI53XQULVKVTDSNBWIJSXITDLLBIHC5KNKMYFSOKPNJZUWVSZJZRHAUDWGNMTA5DVMVDWGSJROZVGOZTUMVXHC6LOKBXHIMTFIN3XSSCHONHTOT2UGFFXITRSKZBWQWJZJIZVG6TMGZ3HSUTNKY2EWOKP");
        test_encode_base(b"6hGgK32wl0kn9r6qHm1QJ0wDSLrs69yvNank02J28MsrTQgbOrvh8Memq706wpvCh6hNnIwh0xRHpU55b63na5bVZDB3wmG7NuJA", b"GZUEOZ2LGMZHO3BQNNXDS4RWOFEG2MKRJIYHORCTJRZHGNRZPF3E4YLONMYDESRSHBGXG4SUKFTWET3SOZUDQTLFNVYTOMBWO5YHMQ3IGZUE43SJO5UDA6CSJBYFKNJVMI3DG3TBGVRFMWSEIIZXO3KHG5HHKSSB");
        test_encode_base(b"vkYZxfFRh6EcRw4fXgudmyxXW6iZ0RWVqYYbB5PlgNkt58HvG0EjQu6BuTKk8GuOlDTowRzCdoGj1AcE2RbGTo6LwuHNjLNAlZU8", b"OZVVSWTYMZDFE2BWIVRVE5ZUMZMGO5LENV4XQWCXGZUVUMCSK5LHCWKZMJBDKUDMM5HGW5BVHBEHMRZQIVVFC5JWIJ2VIS3LHBDXKT3MIRKG652SPJBWI32HNIYUCY2FGJJGER2UN43EY53VJBHGUTCOIFWFUVJY");
        test_encode_base(b"2SsI9O29mGgFKyTkX7YQ8HdNSAHzm4g1Mf2328HKh1PRQF6u46LdMYaFsAqh7hJhJFG262geASVX9k7JaeHHHLbA6Q59V32Qm0RJ", b"GJJXGSJZJ4ZDS3KHM5DEW6KUNNMDOWKRHBEGITSTIFEHU3JUM4YU2ZRSGMZDQSCLNAYVAUSRIY3HKNBWJRSE2WLBIZZUC4LIG5UEU2CKIZDTENRSM5SUCU2WLA4WWN2KMFSUQSCIJRRECNSRGU4VMMZSKFWTAUSK");
        test_encode_base(b"NZQw1mXnaeZ6XuObt7Mzjm30YDoiDu3pbfLSPiNeo5WfImIQiwxSa5Txt8Fyj9MiL1FV1ypYM5yEhzN0Mvf6q8CNEakvCrY5Yzgn", b"JZNFC5ZRNVMG4YLFLI3FQ5KPMJ2DOTL2NJWTGMCZIRXWSRDVGNYGEZSMKNIGSTTFN42VOZSJNVEVC2LXPBJWCNKUPB2DQRTZNI4U22KMGFDFMMLZOBMU2NLZIVUHUTRQJV3GMNTRHBBU4RLBNN3EG4SZGVMXUZ3O");
        test_encode_base(b"e8Dxih0NnaWPeX7ekHYFN2uIY879nVQPu1FShdQyuNuvoY7KNKfk5XKJngR0UyMJmTpMiYSe16NLELGAhHw0m1G8vonO80dO55Ya", b"MU4EI6DJNAYE43TBK5IGKWBXMVVUQWKGJYZHKSKZHA3TS3SWKFIHKMKGKNUGIULZOVHHK5TPLE3UWTSLMZVTKWCLJJXGOURQKV4U2STNKRYE22KZKNSTCNSOJRCUYR2BNBEHOMDNGFDTQ5TPNZHTQMDEJ42TKWLB");
        test_encode_base(b"Ukjii9q5cRHqeEpwazI4mZvQxl6YjJU0YV5JUTYfLSEgredMJYBqLEhew0ShDpUjphhF4DQVbamn2i0T0R5AqAmyEyWM9c5s9TXK", b"KVVWU2LJHFYTKY2SJBYWKRLQO5QXUSJUNVNHMULYNQ3FS2SKKUYFSVRVJJKVIWLGJRJUKZ3SMVSE2SSZIJYUYRLIMV3TAU3IIRYFK2TQNBUEMNCEKFLGEYLNNYZGSMCUGBJDKQLRIFWXSRLZK5GTSYZVOM4VIWCL");
        test_encode_base(b"ZOdWX9SH0knm8eq76TAG5dK232MsoNzlaAqJg9lgUeGgRjXuexRxGTvUlJfzpGnzqqliijZljmJR5EmR83Hax8Q88bSWyPLi9o0s", b"LJHWIV2YHFJUQMDLNZWTQZLRG43FIQKHGVSEWMRTGJGXG32OPJWGCQLRJJTTS3DHKVSUOZ2SNJMHKZLYKJ4EOVDWKVWEUZT2OBDW46TROFWGS2LKLJWGU3KKKI2UK3KSHAZUQYLYHBITQODCKNLXSUCMNE4W6MDT");
        test_encode_base(b"lTRu72qY160dBYvAsTZM6GQ1roYX6L2EX1lDq9FDz4Xj8HfUpN4ByP10RPamtrQIxJaaiqK9DDwDYFBtjJYxPh9hba6sgiAS92Xd", b"NRKFE5JXGJYVSMJWGBSEEWLWIFZVIWSNGZDVCMLSN5MVQNSMGJCVQMLMIRYTSRSEPI2FQ2RYJBTFK4COGRBHSUBRGBJFAYLNORZFCSLYJJQWC2LRJM4UIRDXIRMUMQTUNJFFS6CQNA4WQYTBGZZWO2KBKM4TEWDE");
        test_encode_base(b"yW83OIRVqapXTBROMyJOat7pnAldLzCzG9P4cu8TLXxHSGIufGZFmX9Yv2CXmC3fdni0yJYxgtG9M4dhpJ7ku3LqaCq5f7BHIZ1v", b"PFLTQM2PJFJFM4LBOBMFIQSSJ5GXSSSPMF2DO4DOIFWGITD2IN5EOOKQGRRXKOCUJRMHQSCTI5EXKZSHLJDG2WBZLF3DEQ2YNVBTGZTENZUTA6KKLF4GO5CHHFGTIZDIOBFDO23VGNGHCYKDOE2WMN2CJBEVUMLW");
        test_encode_base(b"jeuMaPa4zWwdqIqGiFgJORz8ujgC6dx23CPPTiFmoU0FsVqWKQJV3FJOuTPP2PyaV4cUiMxBiPFIQnR1Upy7DdO8UxNfLxji2AHq", b"NJSXKTLBKBQTI6SXO5SHCSLRI5UUMZ2KJ5JHUODVNJTUGNTEPAZDGQ2QKBKGSRTNN5KTARTTKZYVOS2RJJLDGRSKJ52VIUCQGJIHSYKWGRRVK2KNPBBGSUCGJFIW4URRKVYHSN2EMRHTQVLYJZTEY6DKNEZECSDR");
        test_encode_base(b"cSFO12eqASxNKqG8hVliFkSe7kkDSbmZjop1rcmt2O7Qai2Rhh1QgekC8Uq22MHixY9lfMCaXLxePwNJQ3LUwp1Zk6oTGHrsBBfh", b"MNJUMTZRGJSXCQKTPBHEW4KHHBUFM3DJIZVVGZJXNNVUIU3CNVNGU33QGFZGG3LUGJHTOULBNEZFE2DIGFIWOZLLIM4FK4JSGJGUQ2LYLE4WYZSNINQVQTDYMVIHOTSKKEZUYVLXOAYVU2ZWN5KEOSDSONBEEZTI");
        test_encode_base(b"4Pcyvu7xfjCfQZQAoqXNWs3Y3VRmOOGZ6hpbNVe6KsgIe2yiSf8vlrlH9WjnVhGNUYd3Vq6fCrKogQB94Janlfpgmc3u81g1wfUf", b"GRIGG6LWOU3XQZTKINTFCWSRIFXXCWCOK5ZTGWJTKZJG2T2PI5NDM2DQMJHFMZJWJNZWOSLFGJ4WSU3GHB3GY4TMJA4VO2TOKZUEOTSVLFSDGVTRGZTEG4SLN5TVCQRZGRFGC3TMMZYGO3LDGN2TQMLHGF3WMVLG");
        test_encode_base(b"F0uxMRbCuX2rk6pOPF7n01OEErbDP4MIFC6LNledjykBztTqNmsw9FKBtiyjPgfXNPWxNdZXHn0NWRblB9xrhV7F2MVJgjhOgO5H", b"IYYHK6CNKJREG5KYGJZGWNTQJ5IEMN3OGAYU6RKFOJREIUBUJVEUMQZWJRHGYZLENJ4WWQT2ORKHCTTNON3TSRSLIJ2GS6LKKBTWMWCOKBLXQTTELJMEQ3RQJZLVEYTMII4XQ4TIKY3UMMSNKZFGO2TIJ5TU6NKI");
        test_encode_base(b"hskme9GzL9wklhDYK1mrEAHhx5Rg6NLFeRxDTpqUcrdR8seX9DEJhWLYxrPoDaW4xFRJHg7AQ2QlN3uB0CMpLgjX9dOCSUx5YXeW", b"NBZWW3LFHFDXUTBZO5VWY2CELFFTC3LSIVAUQ2DYGVJGONSOJRDGKUTYIRKHA4KVMNZGIURYONSVQOKEIVFGQV2MLF4HEUDPIRQVONDYIZJEUSDHG5AVCMSRNRHDG5KCGBBU24CMM5VFQOLEJ5BVGVLYGVMVQZKX");
        test_encode_base(b"sdvDPUkNWJPQFscwJtNgIyUKSS4kY69uO5igbnnK2yl6zz8m9EojEC1dU9LC3m1mkAMquqlVsOQT6AchTYVFkodDoLQsgCiO6Vlh", b"ONSHMRCQKVVU4V2KKBIUM43DO5FHITTHJF4VKS2TKM2GWWJWHF2U6NLJM5RG43SLGJ4WYNT2PI4G2OKFN5VEKQZRMRKTSTCDGNWTC3LLIFGXC5LRNRLHGT2RKQ3ECY3IKRMVMRTLN5SEI32MKFZWOQ3JJ43FM3DI");
        test_encode_base(b"AhAjvvXgQ8VeSisJoUxaW1RA1ffphRgTsTJa1bIOYsRH3byevMmu7SW67PHY8CogtVZ9sDOOBkdqWAzOeeIaw16lc6XNvizsE99s", b"IFUEC2TWOZMGOUJYKZSVG2LTJJXVK6DBK4YVEQJRMZTHA2CSM5KHGVCKMEYWESKPLFZVESBTMJ4WK5SNNV2TOU2XGY3VASCZHBBW6Z3UKZNDS42EJ5HUE23EOFLUC6SPMVSUSYLXGE3GYYZWLBHHM2L2ONCTSOLT");
        test_encode_base(b"EgVC3J6zlo4iKeGDxu3NdFAJut4g9ewLxMDD6Jv1VX8pC1mHXIHuHRiRwAVn2hDKl8NpFv5BIsmAggT8ojOvbg1SqibauAm3F7AA", b"IVTVMQZTJI3HU3DPGRUUWZKHIR4HKM2OMRDECSTVOQ2GOOLFO5GHQTKEIQ3EU5RRKZMDQ4CDGFWUQWCJJB2UQUTJKJ3UCVTOGJUEIS3MHBHHARTWGVBES43NIFTWOVBYN5VE65TCM4YVG4LJMJQXKQLNGNDDOQKB");
        test_encode_base(b"PgmBURcdUdJJ4ZVpg0CPaQ3DyqfOtLVEnJwD1RoJxHpWGuJo9d7h9i5DJjHnVyiOcoQ2TAw63Eajxryqxrn0Vhilhm5Ggb74DTAb", b"KBTW2QSVKJRWIVLEJJFDIWSWOBTTAQ2QMFITGRDZOFTE65CMKZCW4STXIQYVE32KPBEHAV2HOVFG6OLEG5UDS2JVIRFGUSDOKZ4WST3DN5ITEVCBO43DGRLBNJ4HE6LRPBZG4MCWNBUWY2DNGVDWOYRXGRCFIQLC");
        test_encode_base(b"enIDXaZc1lyktZSbsWqIaLr0X43LXJhce83393ssCpcsXGllO7ZY6VsjnOn5RMwgTUpdwIXL7pCxFRxDKb0Q0Mq7DUL9z89sme19", b"MVXESRCYMFNGGMLMPFVXIWSTMJZVO4KJMFGHEMCYGQZUYWCKNBRWKOBTGM4TG43TINYGG42YI5WGYTZXLJMTMVTTNJXE63RVKJGXOZ2UKVYGI52JLBGDO4CDPBDFE6CEJNRDAUJQJVYTORCVJQ4XUOBZONWWKMJZ");
        test_encode_base(b"qhRApsjLUeUyZsmIoXbwMowhkU8Mi2HhjJmzoXDP42XPPZbnQjXSor5NWFQ7E17zraMP3p1Y5xNUGRiR3ymnAnpKRSdbWiB0EcRV", b"OFUFEQLQONVEYVLFKV4VU43NJFXVQYTXJVXXO2DLKU4E22JSJBUGUSTNPJXVQRCQGQZFQUCQLJRG4ULKLBJW64RVJZLUMUJXIUYTO6TSMFGVAM3QGFMTK6COKVDVE2KSGN4W23SBNZYEWUSTMRRFO2KCGBCWGUSW");
        test_encode_base(b"zQHIqpvNGml4sGkbwm9eHbxGALpE1tSq6PH5KcJsV2Hxjhc0HHmXNuBls9rKN8pQEPCZes5LCRC1S6VfPF2tJv7CYdpzUceEBCl9", b"PJIUQSLROB3E4R3NNQ2HGR3LMJ3W2OLFJBRHQR2BJRYEKMLUKNYTMUCIGVFWGSTTKYZEQ6DKNBRTASCINVME45KCNRZTS4SLJY4HAUKFKBBVUZLTGVGEGUSDGFJTMVTGKBDDE5CKOY3UGWLEOB5FKY3FIVBEG3BZ");
        test_encode_base(b"b3leVqdu8xaNNqvQpII1t7EeGuWfa5ccaU1DY0BIU3JOMG3qNlopC8gkrb5oNnOGO4V8SyikTdf9144JVXuGWo5oNWXxnGAze7vs", b"MIZWYZKWOFSHKODYMFHE44LWKFYESSJROQ3UKZKHOVLWMYJVMNRWCVJRIRMTAQSJKUZUUT2NI4ZXCTTMN5YEGODHNNZGENLPJZXE6R2PGRLDQU3ZNFVVIZDGHEYTINCKKZMHKR2XN42W6TSXLB4G4R2BPJSTO5TT");
        test_encode_base(b"SGi9gh0PE7pxp1q81H6MsmKkah46hmf8px65BML7qxRVwppzFF6JHg5aT8FXrXyABHvu65N3Ua4c4lP43TLpabCxj8FajxUNPCLH", b"KNDWSOLHNAYFARJXOB4HAMLRHAYUQNSNONWUW23BNA2DM2DNMY4HA6BWGVBE2TBXOF4FEVTXOBYHURSGGZFEQZZVMFKDQRSYOJMHSQKCJB3HKNRVJYZVKYJUMM2GYUBUGNKEY4DBMJBXQ2RYIZQWU6CVJZIEGTCI");
        test_encode_base(b"2emllwdnbVCt8W3ryTO5QrWsLfaAZlBP1RNGqqhNxzVVqQqYy8SqyoU2uGC5JUFZGsp00IgooST4Efn7W9Gy3cFR5Azu9zgLoCY0", b"GJSW23DMO5SG4YSWIN2DQVZTOJ4VITZVKFZFO42MMZQUCWTMIJIDCUSOI5YXC2COPB5FMVTRKFYVS6JYKNYXS32VGJ2UOQZVJJKUMWSHONYDAMCJM5XW6U2UGRCWM3RXK44UO6JTMNDFENKBPJ2TS6THJRXUGWJQ");
        test_encode_base(b"f6XEWzW4PutoGK4AY9OmewnFbRFfVGZShGYCgU404LqfcbwHp4lRe677CMa1a46b9yBh9Acfc8HFI4SX44vTdLs1aQlUoJic3Les", b"MY3FQRKXPJLTIUDVORXUOSZUIFMTST3NMV3W4RTCKJDGMVSHLJJWQR2ZINTVKNBQGRGHCZTDMJ3UQ4BUNRJGKNRXG5BU2YJRME2DMYRZPFBGQOKBMNTGGOCIIZETIU2YGQ2HMVDEJRZTCYKRNRKW6STJMMZUYZLT");
        test_encode_base(b"5gFpbgxlahcZqA8BXgNcPRbkwICFpgfNFozHs8OF2jtZOmOZ3P0sR46swXRRMfMsGXunDK03IFRgBaj7KNG9aeEXPL4fg31C9PhU", b"GVTUM4DCM54GYYLIMNNHCQJYIJMGOTTDKBJGE23XJFBUM4DHMZHEM332JBZTQT2GGJVHIWSPNVHVUM2QGBZVENBWON3VQUSSJVTE242HLB2W4RCLGAZUSRSSM5BGC2RXJNHEOOLBMVCVQUCMGRTGOMZRIM4VA2CV");
        test_encode_base(b"Ira3PHDanXYx1Rcq8zKGvH8dBxrp2Sa3GZovioGjDxDOqV9FVaAucYZe6gXgbvLRsqaUKBgrGFU2WP8oLhk9lqNJ4RqlI9XcJrgq", b"JFZGCM2QJBCGC3SYLF4DCUTDOE4HUS2HOZEDQZCCPBZHAMSTMEZUOWTPOZUW6R3KIR4EIT3RKY4UMVTBIF2WGWK2MU3GOWDHMJ3EYUTTOFQVKS2CM5ZEORSVGJLVAODPJRUGWOLMOFHEUNCSOFWESOKYMNFHEZ3R");
        test_encode_base(b"fYapisEYurYPe84pDcP8WJLAqNYq26OHjV764czA2Z2Y6EEswfGusVl95s0TZf0CVhVTpIgTmOclMipgpgg4Uk7SnfLxpL4O5k4N", b"MZMWC4DJONCVS5LSLFIGKOBUOBCGGUBYK5FEYQLRJZMXCMRWJ5EGUVRXGY2GG6SBGJNDEWJWIVCXG53GI52XGVTMHE2XGMCULJTDAQ2WNBLFI4CJM5KG2T3DNRGWS4DHOBTWONCVNM3VG3TGJR4HATBUJ42WWNCO");
        test_encode_base(b"cNDiJ1Ggbz5TMSYVX4I3OjOQ0OEnC76RWFbREJVKLAGqDhB7BgTFmYcbC4Ob1JLObMPjpydIp4L7YqAl9fXRJHJ57KOJHX3hc6xA", b"MNHEI2KKGFDWOYT2GVKE2U2ZKZMDISJTJ5VE6UJQJ5CW4QZXGZJFORTCKJCUUVSLJRAUO4KENBBDOQTHKRDG2WLDMJBTIT3CGFFEYT3CJVIGU4DZMREXANCMG5MXCQLMHFTFQUSKJBFDKN2LJ5FEQWBTNBRTM6CB");
        test_encode_base(b"MKtNugufxtySGHIDyTe7rMrZeQREvTwxm9WA0R3Zzm8wFNjhsGBo404J82HbWPHLR84xUcgNJvOZWnGQGekrTs5QmaBG8roG0N7X", b"JVFXITTVM52WM6DUPFJUOSCJIR4VIZJXOJGXEWTFKFJEK5SUO54G2OKXIEYFEM22PJWTQ52GJZVGQ42HIJXTIMBUJI4DESDCK5IEQTCSHA2HQVLDM5HEU5SPLJLW4R2RI5SWW4SUOM2VC3LBIJDTQ4TPI4YE4N2Y");
        test_encode_base(b"Q9I276La1SHl0OUHhnRb0rEvr47nvgW2AviM9J02oc8mChD7V2orhJLuZ50bPkcd9qB2I1j2aCUBGJ5JcI4CMuERQiMLD4aNwcyT", b"KE4USMRXGZGGCMKTJBWDAT2VJBUG4UTCGBZEK5TSGQ3W45THK4ZEC5TJJU4UUMBSN5RTQ3KDNBCDOVRSN5ZGQSSMOVNDKMDCKBVWGZBZOFBDESJRNIZGCQ2VIJDUUNKKMNETIQ2NOVCVEULJJVGEINDBJZ3WG6KU");
        test_encode_base(b"WI9Xq1V4V7XXO6MFxG5RvAHHJX0SRDfaIsfYTeplxN3tE2xBgigfxN4RwyZrY408wnDFkMp1n5WVok71IfxZSPEjg4QdcTx5y6UY", b"K5ETSWDRGFLDIVRXLBME6NSNIZ4EONKSOZAUQSCKLAYFGUSEMZQUS43GLFKGK4DMPBHDG5CFGJ4EEZ3JM5THQTRUKJ3XSWTSLE2DAODXNZCEM22NOAYW4NKXKZXWWNZRJFTHQWSTKBCWUZZUKFSGGVDYGV4TMVKZ");
        test_encode_base(b"ynjvasUuP0KIw0mljub8WsWyNDwpe458wd5xrQ2zk9xnZgCgmn1VCDJ3rkK7DacyKWyo0CtnbORgudohGLLsZY0tNrl0pDYyaHgD", b"PFXGU5TBONKXKUBQJNEXOMDNNRVHKYRYK5ZVO6KOIR3XAZJUGU4HOZBVPBZFCMT2NM4XQ3S2M5BWO3LOGFLEGRCKGNZGWSZXIRQWG6KLK54W6MCDORXGET2SM52WI33II5GEY422LEYHITTSNQYHARCZPFQUQZ2E");
        test_encode_base(b"njhvhFKnz8Y7lQ0tBqVI5PgRuUGy1yugPBB37NVJNFWe5A3LqxxZbH0oHjNWCZhF2tOYQnDiZGsnuwJ6JYhz33aZJEzQZrhVKilg", b"NZVGQ5TIIZFW46RYLE3WYUJQORBHCVSJGVIGOUTVKVDXSMLZOVTVAQSCGM3U4VSKJZDFOZJVIEZUY4LYPBNGESBQN5EGUTSXINNGQRRSORHVSULOIRUVUR3TNZ2XOSRWJJMWQ6RTGNQVUSSFPJIVU4TIKZFWS3DH");
        test_encode_base(b"rMf9jA5gBkmWa4R5SyM8j54375EG19fO3sfr4r5p9ktRB7FvmSBB8abZ5CjR5h3i8OUnFaLTAduxUeY8mpXzXVbjr59JFwoR6qc2", b"OJGWMOLKIE2WOQTLNVLWCNCSGVJXSTJYNI2TIMZXGVCUOMJZMZHTG43GOI2HENLQHFVXIUSCG5DHM3KTIJBDQYLCLI2UG2SSGVUDG2JYJ5KW4RTBJRKECZDVPBKWKWJYNVYFQ6SYKZRGU4RVHFFEM53PKI3HCYZS");
        test_encode_base(b"b8953UCG8LtlDFcVEnW9NVOoDFzYEH7NMkEwf7hJoM0j52ChssATTNR1WraTkH0hQWDJbGhVChE1ymghHcXIkPxvvMGCYYutPUpE", b"MI4DSNJTKVBUOOCMORWEIRTDKZCW4VZZJZLE632EIZ5FSRKIG5HE222FO5TDO2CKN5GTA2RVGJBWQ43TIFKFITSSGFLXEYKUNNEDA2CRK5CEUYSHNBLEG2CFGF4W2Z3IJBRVQSLLKB4HM5SNI5BVSWLVORIFK4CF");
        test_encode_base(b"Pg3lSKmf2DFTDpGLXALTnb4CbQGPD9C4OydBMOjdiYXAPPyEntHbeaT2qhlgxlWmJQtW3LjkuREOZtt6IkMRw5BUCK0otNMIaJF7", b"KBTTG3CTJNWWMMSEIZKEI4CHJRMECTCUNZRDIQ3CKFDVARBZIM2E66LEIJGU62TENFMVQQKQKB4UK3TUJBRGKYKUGJYWQ3DHPBWFO3KKKF2FOM2MNJVXKUSFJ5NHI5BWJFVU2UTXGVBFKQ2LGBXXITSNJFQUURRX");
        test_encode_base(b"B0NzQp9102dkfVffPoSirWoW72PvoB8SFU0JMcPqFIWsXOmQaLvr0KQ2F3YxVkNt8tLaJWnxfCBkHiMNBTuIuBwK01bFNi2VijIz", b"IIYE46SROA4TCMBSMRVWMVTGMZIG6U3JOJLW6VZXGJIHM32CHBJUMVJQJJGWGUDRIZEVO42YJ5WVCYKMOZZDAS2RGJDDGWLYKZVU45BYORGGCSSXNZ4GMQ2CNNEGSTKOIJKHKSLVIJ3UWMBRMJDE42JSKZUWUSL2");
        test_encode_base(b"I1CwKu90Imti167GaFBZ5DEHbTLDiHPMnEU3cKS0N54yztFPYUz6nai8WazXX2DWMzUXtQg0qbsTLbYoUKK0URvanxRBGesGUnHV", b"JEYUG52LOU4TASLNORUTCNRXI5QUMQS2GVCEKSDCKRGEI2KIKBGW4RKVGNRUWUZQJY2TI6L2ORDFAWKVPI3G4YLJHBLWC6SYLAZEIV2NPJKVQ5CRM4YHCYTTKRGGEWLPKVFUWMCVKJ3GC3TYKJBEOZLTI5KW4SCW");
        test_encode_base(b"isyCAS0qJT7pISamzENIlcK8qXIMIxWE03JOK4V6mtEhVeqghJxouCT1eRSBptZwv4ydyhfxpeMtLhyZwgdxFNSN1UMMcsJVrxID", b"NFZXSQ2BKMYHCSSUG5YESU3BNV5EKTSJNRRUWODRLBEU2SLYK5CTAM2KJ5FTIVRWNV2EK2CWMVYWO2CKPBXXKQ2UGFSVEU2COB2FU53WGR4WI6LIMZ4HAZKNORGGQ6K2O5TWI6CGJZJU4MKVJVGWG42KKZZHQSKE");
        test_encode_base(b"MtkG1OYhlQbYRzPmD8zkIRHePBI0YxVVrnPCrb5FtPehM8QBvZYcL5eHpT2tKZO45WYW2aqEere5vjdx10JbkP4jTW3nI7NUD8tf", b"JV2GWRZRJ5MWQ3CRMJMVE6SQNVCDQ6TLJFJEQZKQIJETAWLYKZLHE3SQINZGENKGORIGK2CNHBIUE5S2LFRUYNLFJBYFIMTUJNNE6NBVK5MVOMTBOFCWK4TFGV3GUZDYGEYEUYTLKA2GUVCXGNXESN2OKVCDQ5DG");
        test_encode_base(b"ZvpL1oxU1cFKIdB17TC8k0F3i87WRBo2qmR7tIcv6YclXyJHuBlRgnQ0hlzdL4nDQFWAbIunGK2x9HEtwdJvCP0FokbWlJx5IUnw", b"LJ3HATBRN54FKMLDIZFUSZCCGE3VIQZYNMYEMM3JHA3VOUSCN4ZHC3KSG52ESY3WGZMWG3CYPFFEQ5KCNRJGO3SRGBUGY6TEJQ2G4RCRIZLUCYSJOVXEOSZSPA4UQRLUO5SEU5SDKAYEM33LMJLWYSTYGVEVK3TX");
        test_encode_base(b"z2QAoexnSBdDFzzvIrVUuMljN4j707kTiW6tvXXcCCHPbxhTgyIdCVLrOcOUNLN2Uny67bJgj4dei9WhWOu0hatlvdOVeaA9NEP0", b"PIZFCQLPMV4G4U2CMRCEM6T2OZEXEVSVOVGWY2SOGRVDOMBXNNKGSVZWOR3FQWDDINBUQUDCPBUFIZ3ZJFSEGVSMOJHWGT2VJZGE4MSVNZ4TMN3CJJTWUNDEMVUTSV3IK5HXKMDIMF2GY5TEJ5LGKYKBHFHEKUBQ");
        test_encode_base(b"Cz6VtWjgq4BKVtF49QiVmz4DqsdwrDGYlqk0v1FrGQK1EUHIEiBZ9eHJNG4VRAOwgxtw2eqpwBvZweJAmrnbQjR0KspWzGBtTjBL", b"IN5DMVTUK5VGO4JUIJFVM5CGGQ4VC2KWNV5DIRDRONSHO4SEI5MWY4LLGB3DCRTSI5IUWMKFKVEESRLJIJNDSZKIJJHEONCWKJAU653HPB2HOMTFOFYHOQTWLJ3WKSSBNVZG4YSRNJJDAS3TOBLXUR2CORKGUQSM");
        test_encode_base(b"4IkvaXMpXT5KN3MIwgEABr6jnGaMuJRyXnxwbvh75UCxYnyDs162K1SydZJbDxgXWLuiYcGYTjN8gu4MnbjOFrLh6jfFzOKyFuwN", b"GREWW5TBLBGXAWCUGVFU4M2NJF3WORKBIJZDM2TOI5QU25KKKJ4VQ3TYO5RHM2BXGVKUG6CZNZ4UI4ZRGYZEWMKTPFSFUSTCIR4GOWCXJR2WSWLDI5MVI2SOHBTXKNCNNZRGUT2GOJGGQNTKMZDHUT2LPFDHK52O");
        test_encode_base(b"9jB46PFfKRqnVtQez8MNAfI5FetWtoa2FkompFSnXHQi821qxLgIlcTAADnOLf4SCXCPrD0aU0As1zjzj3mcRhi18bbNy2aWo04f", b"HFVEENBWKBDGMS2SOFXFM5CRMV5DQTKOIFTESNKGMV2FO5DPMEZEM23PNVYEMU3OLBEFC2JYGIYXC6CMM5EWYY2UIFAUI3SPJRTDIU2DLBBVA4SEGBQVKMCBOMYXU2T2NIZW2Y2SNBUTCODCMJHHSMTBK5XTANDG");
        test_encode_base(b"M1pVjUTVkEyu6tWTHGGn7hs2YypgpiIKmqpBU2iKKHEIrs4PEAkmz2SG0ElqWOXEFqZ9jwcxvTubvqsQH0PrTRqEz6gOewzP6eTJ", b"JUYXAVTKKVKFM22FPF2TM5CXKREEOR3OG5UHGMSZPFYGO4DJJFFW24LQIJKTE2KLJNEEKSLSOM2FARKBNNWXUMSTI4YEK3DRK5HVQRKGOFNDS2TXMN4HMVDVMJ3HC42RJAYFA4SUKJYUK6RWM5HWK532KA3GKVCK");
        test_encode_base(b"H5tkxfqlPq56mqFszrX7FSS2MdY3mITS9zhXnbDLvDaXxUDKUhES8WGEeP9QvK8kPZSmqSWaiWKDAr1aNBdoVoKcg6sfqqIVfG0F", b"JA2XI23YMZYWYUDRGU3G24KGON5HEWBXIZJVGMSNMRMTG3KJKRJTS6TILBXGERCMOZCGCWDYKVCEWVLIIVJTQV2HIVSVAOKROZFTQ22QLJJW24KTK5QWSV2LIRAXEMLBJZBGI32WN5FWGZZWONTHC4KJKZTEOMCG");
        test_encode_base(b"uPiJNTENc354plSwIcuuPX6PY4UeaKNZJVaUOMHKznUkWH33SyckUqKqyniLMKsQObNLvZTNr8VkXRY1QoJFuSAJwZvMlqtN5Cht", b"OVIGSSSOKRCU4YZTGU2HA3CTO5EWG5LVKBMDMUCZGRKWKYKLJZNEUVTBKVHU2SCLPJXFK22XJAZTGU3ZMNVVK4KLOF4W42KMJVFXGUKPMJHEY5S2KRHHEOCWNNMFEWJRKFXUURTVKNAUU522OZGWY4LUJY2UG2DU");
        test_encode_base(b"eNgmf0gRYOMAwUMVCS2N69sh0GM33T7zHZ9f6bcborkvnZaZQ3fXycyhxlFoH7ETk7gheIBY4ZqknNsNLadrbTRPJKtBelIsi2Xl", b"MVHGO3LGGBTVEWKPJVAXOVKNKZBVGMSOGY4XG2BQI5GTGM2UG55EQWRZMY3GEY3CN5ZGW5TOLJQVUUJTMZMHSY3ZNB4GYRTPJA3UKVDLG5TWQZKJIJMTIWTRNNXE442OJRQWI4TCKRJFASSLORBGK3CJONUTEWDM");
        test_encode_base(b"xM0BZA8cvvwDz7TYFtuhDxO0XDk8TaYkmukqUuoExMcXuoTFo3MNla2wfPgj2Zuv50pcgmsMePY4MhHmVQ2apkX6xRR0Mo21W2yk", b"PBGTAQS2IE4GG5TWO5CHUN2ULFDHI5LIIR4E6MCYIRVTQVDBLFVW25LLOFKXK32FPBGWGWDVN5KEM3ZTJVHGYYJSO5TFAZ3KGJNHK5RVGBYGGZ3NONGWKUCZGRGWQSDNKZITEYLQNNMDM6CSKIYE23ZSGFLTE6LL");
        test_encode_base(b"TJ8gi3xa3gECo5rt2bTMkzBzhx1av7iLN3wK2O1iVIb6i8jJQDXXSFC5gyrKKgoUgx32S0jKfGtyP6ZZIp7DXEhVMNTHSf1rj2ib", b"KRFDQZ3JGN4GCM3HIVBW6NLSOQZGEVCNNN5EE6TIPAYWC5RXNFGE4M3XJMZE6MLJKZEWENTJHBVEUUKELBMFGRSDGVTXS4SLJNTW6VLHPAZTEUZQNJFWMR3UPFIDMWS2JFYDORCYIVUFMTKOKREFGZRROJVDE2LC");
        test_encode_base(b"W3FkqB3L4lVmT7du0Mi4iDLNr5nwoNbtKUbT2THrvtajObz0RSmK3FOHQj4hIsek6pzs76xtAnM9V1WuTOxSSROoNkIeYS1eW3in", b"K4ZUM23RIIZUYNDMKZWVIN3EOUYE22JUNFCEYTTSGVXHO32OMJ2EWVLCKQZFISDSOZ2GC2SPMJ5DAUSTNVFTGRSPJBIWUNDIJFZWK2ZWOB5HGNZWPB2EC3SNHFLDCV3VKRHXQU2TKJHW6TTLJFSVSUZRMVLTG2LO");
        test_encode_base(b"vjOSp41SkeCJHOYRcql3URla567ycYFRnOQH2MGnCn7DOIrhyL556pqMhT0US2lUDL4oBScd8zWnZ54DUEJ5Rd33U6pC1VCHwzAi", b"OZVE6U3QGQYVG23FINFEQT2ZKJRXC3BTKVJGYYJVGY3XSY2ZIZJG4T2RJAZE2R3OINXDORCPJFZGQ6KMGU2TM4DRJVUFIMCVKMZGYVKEJQ2G6QSTMNSDQ6SXNZNDKNCEKVCUUNKSMQZTGVJWOBBTCVSDJB3XUQLJ");
        test_encode_base(b"o4RmgDwPnboCZokc0c2zTzXvYc0hQdbdEvimuSmCMTLXlKfRKyeMvBgQ00N19n1iV1OBZzGWaxFZ79dlIOuI1IXTHxfCNHa8ALIz", b"N42FE3LHIR3VA3TCN5BVU33LMMYGGMT2KR5FQ5SZMMYGQULEMJSEK5TJNV2VG3KDJVKEYWDMJNTFES3ZMVGXMQTHKEYDATRRHFXDC2KWGFHUEWT2I5LWC6CGLI3TSZDMJFHXKSJRJFMFISDYMZBU4SDBHBAUYSL2");
        test_encode_base(b"LFr7UQcfv75NiCbWYrCUJtDMqUjKF6rVMkk832P6i4attCo0p5l9jSBeKYDapbr3ns4w9qKqkzoSpQSWHAmQn0pzSfFkNBxVKpy9", b"JRDHEN2VKFRWM5RXGVHGSQ3CK5MXEQ2VJJ2EITLRKVVEWRRWOJLE223LHAZTEUBWNE2GC5DUINXTA4BVNQ4WUU2CMVFVSRDBOBRHEM3OOM2HOOLRJNYWW6TPKNYFCU2XJBAW2ULOGBYHUU3GIZVU4QTYKZFXA6JZ");
        test_encode_base(b"JJeOJb0djTbwMyorZa9OfixAmrwS9VJLn303VqVhGM9Xxk3kZ0RoSC7WZuRf3Nrtf62twPTt9E5WwygBu95ZKxB6TQcgKFvjbD0D", b"JJFGKT2KMIYGI2SUMJ3U26LPOJNGCOKPMZUXQQLNOJ3VGOKWJJGG4MZQGNLHCVTII5GTSWDYNMZWWWRQKJXVGQZXK5NHKUTGGNHHE5DGGYZHI52QKR2DSRJVK53XSZ2COU4TKWSLPBBDMVCRMNTUWRTWNJREIMCE");
        test_encode_base(b"vJ4W52E0WrYvt9RD2PcrNZR7NccrerqUn1nne4Drvk9zB0Epx94lhSmb9PtFp9slY3hLcPtNXCyaY1qhKOtIH5qJcTVqoQcdn9s0", b"OZFDIVZVGJCTAV3SLF3HIOKSIQZFAY3SJZNFEN2OMNRXEZLSOFKW4MLONZSTIRDSOZVTS6SCGBCXA6BZGRWGQU3NMI4VA5CGOA4XG3CZGNUEYY2QORHFQQ3ZMFMTC4LIJNHXISKIGVYUUY2UKZYW6ULDMRXDS4ZQ");
        test_encode_base(b"NwmyMUj52xc6yaG2DeO8WsocJqMHFlzT6DvEGpJFha8A8RRKcoZvW5r3yxAh3xLmsIH5bNxup72aK4sqrTRVlwT54mRQwRvaISti", b"JZ3W26KNKVVDKMTYMM3HSYKHGJCGKTZYK5ZW6Y2KOFGUQRTMPJKDMRDWIVDXASSGNBQTQQJYKJJEWY3PLJ3FONLSGN4XQQLIGN4EY3LTJFEDKYSOPB2XANZSMFFTI43ROJKFEVTMO5KDKNDNKJIXOUTWMFEVG5DJ");
        test_encode_base(b"AZXuFtejcx989xsj00UAWOITC1wSE8vLbYashKNf7amM4FQvau1U7JhsyDqyjatjZypcbnnucoVtE84AnIEMolDB5CLUuFQC21E3", b"IFNFQ5KGORSWUY3YHE4DS6DTNIYDAVKBK5HUSVCDGF3VGRJYOZGGEWLBONUEWTTGG5QW2TJUIZIXMYLVGFKTOSTION4UI4LZNJQXI2S2PFYGGYTONZ2WG32WORCTQNCBNZEUKTLPNRCEENKDJRKXKRSRIMZDCRJT");
        test_encode_base(b"aEYMiL7CgVgHTQZmAOtuEIbVnah5AXagFde8m06K7i2Mv73aRxPzRNw34KHJ8iyLe1I9rfidRsWbXiHiswla4AjeGWNFEHaTzMSo", b"MFCVSTLJJQ3UGZ2WM5EFIUK2NVAU65DVIVEWEVTOMFUDKQKYMFTUMZDFHBWTANSLG5UTETLWG4ZWCUTYKB5FETTXGM2EWSCKHBUXSTDFGFETS4TGNFSFE42XMJMGSSDJON3WYYJUIFVGKR2XJZDEKSDBKR5E2U3P");
        test_encode_base(b"fGjYuD359Wluljety3tZbbaMMoQ1lZ8O2b5hhJsjdmLpm5495ImKRDI6Rxt1LvorCXSIcYJFBvmWLdKoJognPPiYIdE5pcepX8a7", b"MZDWUWLVIQZTKOKXNR2WY2TFOR4TG5C2MJRGCTKNN5ITC3C2HBHTEYRVNBUEU43KMRWUY4DNGU2DSNKJNVFVERCJGZJHQ5BRJR3G64SDLBJUSY2ZJJDEE5TNK5GGIS3PJJXWO3SQKBUVSSLEIU2XAY3FOBMDQYJX");
        test_encode_base(b"h1R30AYH1kmkeWcuv4ZqUmKQT7nkyW2DNDQq3xaD32e6KWvr4CUqLfQsC3yj22mydaKJehkHY2Xis1365aHC50fjkuB3P3CTAneP", b"NAYVEMZQIFMUQMLLNVVWKV3DOV3DIWTRKVWUWUKUG5XGW6KXGJCE4RCROEZXQYKEGMZGKNSLK53HENCDKVYUYZSRONBTG6LKGIZG26LEMFFUUZLINNEFSMSYNFZTCMZWGVQUQQZVGBTGU23VIIZVAM2DKRAW4ZKQ");
        test_encode_base(b"AT6cJwGyHfL0Dz9M1itm8w0FfS47QMHiMbxC1uMT0Crm7iIfmWI98VMJ7YLrURXKiWanTSYFfkhjBOgOxyWalApM6RAYUrKatvC5", b"IFKDMY2KO5DXSSDGJQYEI6RZJUYWS5DNHB3TARTGKM2DOUKNJBUU2YTYIMYXKTKUGBBXE3JXNFEWM3KXJE4TQVSNJI3VSTDSKVJFQS3JK5QW4VCTLFDGM23INJBE6Z2PPB4VOYLMIFYE2NSSIFMVK4SLMF2HMQZV");
        test_encode_base(b"Fl1mOk1JBt524nfEKnZr9BBNPwzun3x1hm3SD1GMcwsgVbZrVJEJ4qZgBDb4SY43rPk8KyiqEPUTGlVeFUkVdvbtccP9NBhE1ANH", b"IZWDC3KPNMYUUQTUGUZDI3TGIVFW4WTSHFBEETSQO55HK3RTPAYWQ3JTKNCDCR2NMN3XGZ2WMJNHEVSKIVFDI4K2M5BEIYRUKNMTIM3SKBVTQS3ZNFYUKUCVKRDWYVTFIZKWWVTEOZRHIY3DKA4U4QTIIUYUCTSI");
        test_encode_base(b"1TUAj7MheQRDV89huIVvNmJKetGD78L19oJQvwLMyezpgB6TjCDVALwFUVIdQsK0x6pJRTx3eQV8nXRJMtxdXv0klvSFyBWV5PCn", b"GFKFKQLKG5GWQZKRKJCFMOBZNB2USVTWJZWUUS3FORDUINZYJQYTS32KKF3HOTCNPFSXU4DHII3FI2SDIRLECTDXIZKVMSLEKFZUWMDYGZYEUUSUPAZWKUKWHBXFQUSKJV2HQZCYOYYGW3DWKNDHSQSXKY2VAQ3O");
        test_encode_base(b"Cxdx7g3x4Q5SsW5w5cQpVb76Lrdef7IXp0Mnxj2FqVP9uaUdsrozMqwBvZZ7qrIvyq1HjR5HVblirVoJZntSaBtyZWlRRjE6zq04", b"IN4GI6BXM4ZXQNCRGVJXGVZVO42WGULQKZRDONSMOJSGKZRXJFMHAMCNNZ4GUMSGOFLFAOLVMFKWI43SN55E24LXIJ3FUWRXOFZES5TZOEYUQ2SSGVEFMYTMNFZFM32KLJXHIU3BIJ2HSWSXNRJFE2SFGZ5HCMBU");
        test_encode_base(b"ZnNXDYB6oKNYg3rs27t8BX12AneYhAdLhyPgQqsc9GDqXUYV4gA67zRgup6TUK9uv7tRZeQgtHsVnTCbDqDqHvnJwyVz8V9iLJnT", b"LJXE4WCELFBDM32LJZMWOM3SOMZDO5BYIJMDCMSBNZSVS2CBMRGGQ6KQM5IXC43DHFDUI4KYKVMVMNDHIE3DO6SSM52XANSUKVFTS5LWG52FEWTFKFTXISDTKZXFIQ3CIRYUI4KIOZXEU53ZKZ5DQVRZNFGEU3SU");
        test_encode_base(b"D9lyY8kRFdnzalMpzsM9EjUXQo1eSuAs84C9Kpx2cy7opdhPYsSpw6KrGHLAq2OizXJOMieEob5hDiORoSWlKmQYwBCKf1jipdjT", b"IQ4WY6KZHBVVERTENZ5GC3CNOB5HGTJZIVVFKWCRN4YWKU3VIFZTQNCDHFFXA6BSMN4TO33QMRUFAWLTKNYHONSLOJDUQTCBOEZE62L2LBFE6TLJMVCW6YRVNBCGST2SN5JVO3CLNVIVS52CINFWMMLKNFYGI2SU");
        test_encode_base(b"7FO8auGb5sjB2Xjne51lCp4fF3BvYkv3Pimp74xDIHhWZxV9JH7kQxtDFHyrhBugGqBnNl19QZyuDrsGhwUfCmGPOM5DzQAYKZaX", b"G5DE6ODBOVDWENLTNJBDEWDKNZSTKMLMINYDIZSGGNBHMWLLOYZVA2LNOA3TI6CEJFEGQV22PBLDSSSIG5VVC6DUIRDEQ6LSNBBHKZ2HOFBG4TTMGE4VCWTZOVCHE42HNB3VKZSDNVDVAT2NGVCHUUKBLFFVUYKY");
        test_encode_base(b"fQBv7IrjrIC7lZd5HTMS69J9jUORFT1Jdk2lmSYy3RWh5ZkthFXmaqImYa2gYjDk0aOR7GAFwO5TU6oOwnXUKTnfaKeQvEAX0tlD", b"MZIUE5RXJFZGU4SJIM3WYWTEGVEFITKTGY4UUOLKKVHVERSUGFFGI2ZSNRWVGWLZGNJFO2BVLJVXI2CGLBWWC4KJNVMWCMTHLFVEI2ZQMFHVEN2HIFDHOTZVKRKTM32PO5XFQVKLKRXGMYKLMVIXMRKBLAYHI3CE");
        test_encode_base(b"GXYpRKAsRvNHYMGc44H2MYxcXgplCggQUUtJgaMG3lWx0ZLrk3vUglz4Ob7fAQ7ntM20zZ3GOnfwPvmIRRpvnHvWEB9OHrAgzozX", b"I5MFS4CSJNAXGUTWJZEFSTKHMM2DISBSJVMXQY2YM5YGYQ3HM5IVKVLUJJTWCTKHGNWFO6BQLJGHE2ZTOZKWO3D2GRHWEN3GIFITO3TUJUZDA6S2GNDU63TGO5IHM3KJKJJHA5TOJB3FORKCHFHUQ4SBM55G66SY");
        test_encode_base(b"UK3rIgwNK9psIz3cAVfeWE31kuLcCBDaHjDzecdPdqxngGvPgjpNF2ybwRKi3bbpsnLQfgkyb4nIa2dckCPSSyw3jYBNipvyWuCw", b"KVFTG4SJM53U4SZZOBZUS6RTMNAVMZTFK5CTGMLLOVGGGQ2CIRQUQ2SEPJSWGZCQMRYXQ3THI53FAZ3KOBHEMMTZMJ3VES3JGNRGE4DTNZGFCZTHNN4WENDOJFQTEZDDNNBVAU2TPF3TG2SZIJHGS4DWPFLXKQ3X");
        test_encode_base(b"09Qp03cSwYEpluObRHOplzVOhrp7aP3rs27JJ3LUeLKfVOP2nolcyi9RY9PlDQOw3pnlxYMHyYCMtvQTYah0ooM7qwjcmXvSzHFo", b"GA4VC4BQGNRVG52ZIVYGY5KPMJJEQT3QNR5FMT3IOJYDOYKQGNZHGMRXJJFDGTCVMVGEWZSWJ5IDE3TPNRRXS2JZKJMTSUDMIRIU65ZTOBXGY6CZJVEHSWKDJV2HMUKULFQWQMDPN5GTO4LXNJRW2WDWKN5EQRTP");
        test_encode_base(b"7BmQp5EXIqwAEd0qAdpMDUjTbRj2dxZLtpVNFT31S2ZETbefUNKBKZvdL5XPRcTDkiPO6bwXJtpGyLKIOFgTzkfhSn7NoDrnsN3R", b"G5BG2ULQGVCVQSLRO5AUKZBQOFAWI4CNIRKWUVDCKJVDEZDYLJGHI4CWJZDFIMZRKMZFURKUMJSWMVKOJNBEWWTWMRGDKWCQKJRVIRDLNFIE6NTCO5MEU5DQI54UYS2JJ5DGOVD2NNTGQU3OG5HG6RDSNZZU4M2S");
        test_encode_base(b"2MIRdQ2B3R9c9HrtFo8oBqutGweYprUgatuYzMgpXqwgqywUdiN1y6ConNJdpAq5kHFDXgB6NpltAP0QHVi6FDZTwAMfBRczpcVO", b"GJGUSUTEKEZEEM2SHFRTSSDSORDG6ODPIJYXK5CHO5SVS4DSKVTWC5DVLF5E2Z3QLBYXOZ3RPF3VKZDJJYYXSNSDN5XE4STEOBAXCNLLJBDEIWDHII3E44DMORAVAMCRJBLGSNSGIRNFI52BJVTEEUTDPJYGGVSP");
        test_encode_base(b"MABBgsPbpaoJrvU0OlMZSriQVbZ5Ox9X3ixkgSZowq7WokkwreDKH7roucBLoWJ8dd3k12QvoJhimOB1AC9hvRPmEoWYtQ0hudxE", b"JVAUEQTHONIGE4DBN5FHE5SVGBHWYTK2KNZGSUKWMJNDKT3YHFMDG2LYNNTVGWTPO5YTOV3PNNVXO4TFIRFUQN3SN52WGQSMN5LUUODEMQZWWMJSKF3G6STINFWU6QRRIFBTS2DWKJIG2RLPK5MXIUJQNB2WI6CF");
        test_encode_base(b"wEkN3FTszs7IBiiGXvH2SoPEufQ7095JV7ojHqYzzoLBVlYhQk8yxqXoMV3lrgfJNmIR4qYmsVA7G7lEM8dOwle6aUJjVUbYTGbL", b"O5CWWTRTIZKHG6TTG5EUE2LJI5MHMSBSKNXVARLVMZITOMBZGVFFMN3PNJEHCWL2PJXUYQSWNRMWQULLHB4XQ4KYN5GVMM3MOJTWMSSONVEVENDRLFWXGVSBG5DTO3CFJU4GIT3XNRSTMYKVJJVFMVLCLFKEOYSM");
        test_encode_base(b"ePvjuxgewt1Pvj34fGP2i7icNC8mRhDRv1DSxMHdMqDE9O4oHX05n3BpfVfvKSA9UcX4yrpc1ofEIpOO4BJnAuw5qr2snflrFlN7", b"MVIHM2TVPBTWK53UGFIHM2RTGRTEOUBSNE3WSY2OIM4G2UTIIRJHMMKEKN4E2SDEJVYUIRJZJ42G6SCYGA2W4M2COBTFMZTWJNJUCOKVMNMDI6LSOBRTC33GIVEXAT2PGRBEU3SBOV3TK4LSGJZW4ZTMOJDGYTRX");
        test_encode_base(b"jaVVhvCmiU7Nix7uKSAwR6dihlmCMgPG2DUHL4ulaWCppYslTVTkFdvnuGRetB3IX7ZtY7ApTJQGzDafe23o4g07E4mWfvk6ZEi2", b"NJQVMVTIOZBW22KVG5HGS6BXOVFVGQLXKI3GI2LINRWUGTLHKBDTERCVJBGDI5LMMFLUG4DQLFZWYVCWKRVUMZDWNZ2UOUTFORBDGSKYG5NHIWJXIFYFISSRI55EIYLGMUZDG3ZUM4YDORJUNVLWM5TLGZNEK2JS");
        test_encode_base(b"SmPverljLU6ct4biRiKqiFzzAK0q9TE43A9j6BW15N1s4lKg0uA4EOcVq6LMUtWlcHAQZB8jSUurlRkQwKXpo3RIAkpecncZpIem", b"KNWVA5TFOJWGUTCVGZRXINDCNFJGSS3RNFDHU6SBJMYHCOKUIU2DGQJZNI3EEVZRGVHDC4ZUNRFWOMDVIE2EKT3DKZYTMTCNKV2FO3DDJBAVCWSCHBVFGVLVOJWFE22RO5FVQ4DPGNJESQLLOBSWG3TDLJYESZLN");
        test_encode_base(b"P9vVvoGvt6tLUDQxl7P2UXhujjf2DyeMQOHPoEhXnSdPO7D2U2w5aqmLubmTZRGf4UgzSThVFPBJZHsdCteyr6eEfRO6YFPyHRoM", b"KA4XMVTWN5DXM5BWORGFKRCRPBWDOUBSKVMGQ5LKNJTDERDZMVGVCT2IKBXUK2CYNZJWIUCPG5CDEVJSO42WC4LNJR2WE3KULJJEOZRUKVTXUU2UNBLEMUCCJJNEQ43EIN2GK6LSGZSUKZSSJ43FSRSQPFEFE32N");
    }
}
